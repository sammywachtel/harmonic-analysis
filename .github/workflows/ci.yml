name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-generation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-dev.txt
        pip install types-jsonschema

    - name: Generate comprehensive test cases
      run: python scripts/generate_comprehensive_multi_layer_tests.py

    - name: Upload generated test data
      uses: actions/upload-artifact@v4
      with:
        name: test-data
        path: tests/data/generated/

  test-matrix:
    runs-on: ubuntu-latest
    needs: test-generation
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Download generated test data
      uses: actions/download-artifact@v4
      with:
        name: test-data
        path: tests/data/generated/

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-dev.txt
        pip install types-jsonschema

    - name: Run type checking
      run: mypy src/

    - name: Run linting
      run: flake8 src/ tests/

    - name: Check code formatting
      run: black --check src/ tests/

    - name: Run tests
      run: pytest --cov=harmonic_analysis --cov-report=xml -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Summary job for branch protection rules
  test:
    name: CI / test
    runs-on: ubuntu-latest
    needs: [test-matrix, build]
    if: always()
    steps:
      - name: Check test matrix status
        run: |
          if [[ "${{ needs.test-matrix.result }}" == "success" ]]; then
            echo "All tests passed!"
            exit 0
          else
            echo "Some tests failed!"
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs: [test-generation]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
