name: Comprehensive Python CI/CD

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main, feature/* ]

jobs:
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi
          # Install linting tools
          pip install black isort flake8 mypy

      - name: Validate Black formatting
        run: |
          echo "🎨 Validating Black formatting..."
          black --check --diff . || {
            echo "❌ Code formatting issues found!"
            echo "💡 Run locally: black ."
            echo "💡 Or run: pre-commit run black --all-files"
            exit 1
          }

      - name: Validate isort import sorting
        run: |
          echo "📚 Validating import sorting..."
          isort --check --diff . || {
            echo "❌ Import sorting issues found!"
            echo "💡 Run locally: isort ."
            echo "💡 Or run: pre-commit run isort --all-files"
            exit 1
          }

      - name: Run Flake8 linter
        run: |
          echo "🔍 Running Flake8 linter..."
          flake8 . --max-line-length=88 --extend-ignore=E203,W503 || {
            echo "❌ Linting issues found!"
            echo "💡 Fix issues locally and commit changes"
            echo "💡 Or run: pre-commit run flake8 --all-files"
            exit 1
          }

      - name: Run MyPy type checking
        run: |
          echo "🔍 Running MyPy type checking..."
          mypy src/ --ignore-missing-imports || {
            echo "❌ Type checking issues found!"
            echo "💡 Fix type issues locally and commit changes"
            echo "💡 Or run: pre-commit run mypy-src --all-files"
            exit 1
          }

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi
          pip install pytest pytest-cov

      - name: Install package in development mode
        run: |
          echo "📦 Installing package in development mode..."
          pip install -e .

      - name: Run core unit tests
        run: |
          echo "🧪 Running core unit tests..."
          pytest tests/ -v --cov=src/harmonic_analysis --cov-report=term-missing --cov-report=xml

      - name: Generate comprehensive test data
        run: |
          echo "🎯 Generating comprehensive test data..."
          python scripts/generate_comprehensive_multi_layer_tests.py
          echo "✅ Generated test data files:"
          ls -la tests/generated/

      - name: Validate behavioral parity
        run: |
          echo "🎼 Validating behavioral parity with comprehensive test suite..."
          python scripts/validate_with_generated_data.py

      - name: Upload coverage reports
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
